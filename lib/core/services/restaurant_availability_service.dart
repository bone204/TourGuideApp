import 'dart:convert';
import 'package:http/http.dart' as http;
import 'package:flutter/material.dart';
import 'package:tourguideapp/models/table_availability_model.dart';

class RestaurantAvailabilityService {
  // Gi·∫£ l·∫≠p API endpoint c·ªßa ƒë·ªëi t√°c
  static const String _mockApiUrl =
      'https://mock-restaurant-api.example.com/api/availability';

  // D·ªØ li·ªáu m·∫´u ƒë·ªÉ gi·∫£ l·∫≠p
  static final Map<String, List<TableAvailabilityModel>> _mockAvailabilityData =
      {
    'R00001': [
      // Restaurant ID
      TableAvailabilityModel(
        tableId: 'T00001',
        tableName: 'B√†n VIP C·ª≠a S·ªï',
        tableType: 'vip',
        capacity: 4,
        availableTables: 3,
        totalTables: 5,
        price: 500000.0,
        photo:
            'https://images.unsplash.com/photo-1414235077428-338989a2e8c0?w=400',
        amenities: ['View ƒë·∫πp', 'Y√™n tƒ©nh', 'Ph·ª•c v·ª• ri√™ng'],
        description:
            'B√†n VIP v·ªõi view c·ª≠a s·ªï ƒë·∫πp, ph√π h·ª£p cho b·ªØa t·ªëi l√£ng m·∫°n',
        location: 'Window Side',
      ),
      TableAvailabilityModel(
        tableId: 'T00002',
        tableName: 'B√†n Th∆∞·ªùng',
        tableType: 'standard',
        capacity: 6,
        availableTables: 8,
        totalTables: 12,
        price: 300000.0,
        photo:
            'https://images.unsplash.com/photo-1517248135467-4c7edcad34c4?w=400',
        amenities: ['Kh√¥ng gian r·ªông', 'Ph√π h·ª£p gia ƒë√¨nh'],
        description: 'B√†n th∆∞·ªùng v·ªõi kh√¥ng gian r·ªông r√£i, ph√π h·ª£p cho gia ƒë√¨nh',
        location: 'Indoor',
      ),
      TableAvailabilityModel(
        tableId: 'T00003',
        tableName: 'B√†n Ngo√†i Tr·ªùi',
        tableType: 'outdoor',
        capacity: 8,
        availableTables: 2,
        totalTables: 4,
        price: 400000.0,
        photo:
            'https://images.unsplash.com/photo-1559339352-11d035aa65de?w=400',
        amenities: ['Kh√¥ng gian m·ªü', 'Gi√≥ m√°t', 'View ƒë·∫πp'],
        description: 'B√†n ngo√†i tr·ªùi v·ªõi kh√¥ng gian m·ªü, gi√≥ m√°t',
        location: 'Garden',
      ),
    ],
    'R00002': [
      TableAvailabilityModel(
        tableId: 'T00004',
        tableName: 'B√†n VIP',
        tableType: 'vip',
        capacity: 4,
        availableTables: 1,
        totalTables: 3,
        price: 600000.0,
        photo:
            'https://images.unsplash.com/photo-1414235077428-338989a2e8c0?w=400',
        amenities: ['Ph·ª•c v·ª• ri√™ng', 'Menu ƒë·∫∑c bi·ªát'],
        description: 'B√†n VIP v·ªõi ph·ª•c v·ª• ri√™ng v√† menu ƒë·∫∑c bi·ªát',
        location: 'Private Area',
      ),
      TableAvailabilityModel(
        tableId: 'T00005',
        tableName: 'B√†n Th∆∞·ªùng',
        tableType: 'standard',
        capacity: 6,
        availableTables: 5,
        totalTables: 8,
        price: 250000.0,
        photo:
            'https://images.unsplash.com/photo-1517248135467-4c7edcad34c4?w=400',
        amenities: ['Kh√¥ng gian tho·∫£i m√°i'],
        description: 'B√†n th∆∞·ªùng v·ªõi kh√¥ng gian tho·∫£i m√°i',
        location: 'Main Hall',
      ),
    ],
    'R00003': [
      TableAvailabilityModel(
        tableId: 'T00006',
        tableName: 'B√†n VIP',
        tableType: 'vip',
        capacity: 4,
        availableTables: 0, // H·∫øt b√†n
        totalTables: 2,
        price: 800000.0,
        photo:
            'https://images.unsplash.com/photo-1414235077428-338989a2e8c0?w=400',
        amenities: ['Ph·ª•c v·ª• cao c·∫•p', 'Menu ƒë·∫∑c bi·ªát', 'View ƒë·∫πp'],
        description: 'B√†n VIP cao c·∫•p v·ªõi ph·ª•c v·ª• ƒë·∫∑c bi·ªát',
        location: 'VIP Area',
      ),
      TableAvailabilityModel(
        tableId: 'T00007',
        tableName: 'B√†n Th∆∞·ªùng',
        tableType: 'standard',
        capacity: 8,
        availableTables: 3,
        totalTables: 6,
        price: 350000.0,
        photo:
            'https://images.unsplash.com/photo-1517248135467-4c7edcad34c4?w=400',
        amenities: ['Kh√¥ng gian r·ªông', 'Ph√π h·ª£p nh√≥m'],
        description: 'B√†n th∆∞·ªùng v·ªõi kh√¥ng gian r·ªông, ph√π h·ª£p cho nh√≥m',
        location: 'Main Hall',
      ),
    ],
  };

  /// Gi·∫£ l·∫≠p API call ƒë·ªÉ ki·ªÉm tra b√†n tr·ªëng
  /// Trong th·ª±c t·∫ø, ƒë√¢y s·∫Ω l√† HTTP request ƒë·∫øn API c·ªßa ƒë·ªëi t√°c
  Future<List<TableAvailabilityModel>> checkTableAvailability({
    required String restaurantId,
    required DateTime checkInDate,
    required TimeOfDay checkInTime,
    String? tableType, // Optional: l·ªçc theo lo·∫°i b√†n
  }) async {
    try {
      print('üçΩÔ∏è ƒêang ki·ªÉm tra b√†n tr·ªëng cho nh√† h√†ng $restaurantId...');
      print('üìÖ Ng√†y: ${checkInDate.toString().split(' ')[0]}');
      print(
          'üïê Gi·ªù: ${checkInTime.hour}:${checkInTime.minute.toString().padLeft(2, '0')}');
      if (tableType != null) {
        print('üçΩÔ∏è Lo·∫°i b√†n: $tableType');
      }

      // Gi·∫£ l·∫≠p delay network
      await Future.delayed(Duration(milliseconds: 800));

      // L·∫•y d·ªØ li·ªáu m·∫´u
      final availabilityData = _mockAvailabilityData[restaurantId] ?? [];

      // L·ªçc theo lo·∫°i b√†n n·∫øu c√≥
      final filteredData = availabilityData.where((table) {
        // L·ªçc theo lo·∫°i b√†n n·∫øu c√≥
        final isTypeMatch = tableType == null || table.tableType == tableType;
        return isTypeMatch;
      }).toList();

      // T·∫°o d·ªØ li·ªáu m·∫´u ƒë·ªông d·ª±a tr√™n ng√†y v√† gi·ªù
      print(
          'üìä T·∫°o d·ªØ li·ªáu m·∫´u cho ng√†y ${checkInDate.toString().split(' ')[0]} - ${checkInTime.hour}:${checkInTime.minute.toString().padLeft(2, '0')}...');
      return _generateMockAvailabilityForDateTime(
          restaurantId, checkInDate, checkInTime, tableType);
    } catch (e) {
      print('‚ùå L·ªói khi ki·ªÉm tra b√†n tr·ªëng: $e');
      return [];
    }
  }

  /// T·∫°o d·ªØ li·ªáu m·∫´u cho ng√†y v√† gi·ªù c·ª• th·ªÉ
  List<TableAvailabilityModel> _generateMockAvailabilityForDateTime(
    String restaurantId,
    DateTime checkInDate,
    TimeOfDay checkInTime,
    String? tableType,
  ) {
    final tableTypes =
        tableType != null ? [tableType] : ['vip', 'standard', 'outdoor'];
    final results = <TableAvailabilityModel>[];

    // T√≠nh th·ªùi gian (s√°ng/tr∆∞a/t·ªëi)
    final hour = checkInTime.hour;
    final timeSlot = hour < 11
        ? 'morning'
        : hour < 17
            ? 'afternoon'
            : 'evening';
    print('    üïê Khung gi·ªù: $timeSlot');

    for (final type in tableTypes) {
      // T·∫°o s·ªë b√†n tr·ªëng ng·∫´u nhi√™n d·ª±a tr√™n ng√†y v√† gi·ªù
      final availableTables =
          _getRandomAvailabilityForDateTime(type, checkInDate, checkInTime);
      final totalTables =
          availableTables + [1, 2, 3].elementAt(DateTime.now().millisecond % 3);
      final basePrice = _getBasePriceForType(type);

      // T√≠nh gi√° d·ª±a tr√™n ng√†y, gi·ªù v√† lo·∫°i b√†n
      final priceVariation = _getPriceVariation(checkInDate, checkInTime);
      final finalPrice = basePrice * priceVariation;

      results.add(TableAvailabilityModel(
        tableId: 'T${restaurantId.substring(1)}${type[0].toUpperCase()}',
        tableName: _getTableNameForType(type),
        tableType: type,
        capacity: _getCapacityForType(type),
        availableTables: availableTables,
        totalTables: totalTables,
        price: finalPrice,
        photo: _getPhotoForType(type),
        amenities: _getAmenitiesForType(type),
        description: _getDescriptionForType(type),
        location: _getLocationForType(type),
      ));
    }

    return results;
  }

  int _getRandomAvailabilityForDateTime(
      String tableType, DateTime checkInDate, TimeOfDay checkInTime) {
    // Gi·∫£ l·∫≠p logic: cu·ªëi tu·∫ßn v√† gi·ªù ƒÉn t·ªëi √≠t b√†n tr·ªëng h∆°n
    final isWeekend = checkInDate.weekday == DateTime.saturday ||
        checkInDate.weekday == DateTime.sunday;
    final hour = checkInTime.hour;
    final isPeakTime = (hour >= 11 && hour <= 13) || (hour >= 18 && hour <= 20);

    switch (tableType) {
      case 'vip':
        return isWeekend || isPeakTime
            ? [0, 1].elementAt(DateTime.now().millisecond % 2)
            : [1, 2, 3].elementAt(DateTime.now().millisecond % 3);
      case 'standard':
        return isWeekend || isPeakTime
            ? [2, 3, 5].elementAt(DateTime.now().millisecond % 3)
            : [5, 6, 8].elementAt(DateTime.now().millisecond % 3);
      case 'outdoor':
        return isWeekend
            ? [0, 1].elementAt(DateTime.now().millisecond % 2)
            : [1, 2, 3].elementAt(DateTime.now().millisecond % 3);
      default:
        return isWeekend || isPeakTime
            ? [1, 2].elementAt(DateTime.now().millisecond % 2)
            : [3, 4, 5].elementAt(DateTime.now().millisecond % 3);
    }
  }

  String _getTableNameForType(String tableType) {
    switch (tableType) {
      case 'vip':
        return 'B√†n VIP';
      case 'standard':
        return 'B√†n Th∆∞·ªùng';
      case 'outdoor':
        return 'B√†n Ngo√†i Tr·ªùi';
      default:
        return 'B√†n Th∆∞·ªùng';
    }
  }

  int _getCapacityForType(String tableType) {
    switch (tableType) {
      case 'vip':
        return 4;
      case 'standard':
        return 6;
      case 'outdoor':
        return 8;
      default:
        return 6;
    }
  }

  String _getPhotoForType(String tableType) {
    switch (tableType) {
      case 'vip':
        return 'https://images.unsplash.com/photo-1414235077428-338989a2e8c0?w=400';
      case 'standard':
        return 'https://images.unsplash.com/photo-1517248135467-4c7edcad34c4?w=400';
      case 'outdoor':
        return 'https://images.unsplash.com/photo-1559339352-11d035aa65de?w=400';
      default:
        return 'https://images.unsplash.com/photo-1517248135467-4c7edcad34c4?w=400';
    }
  }

  List<String> _getAmenitiesForType(String tableType) {
    switch (tableType) {
      case 'vip':
        return ['Ph·ª•c v·ª• ri√™ng', 'Menu ƒë·∫∑c bi·ªát', 'View ƒë·∫πp'];
      case 'standard':
        return ['Kh√¥ng gian tho·∫£i m√°i', 'Ph√π h·ª£p gia ƒë√¨nh'];
      case 'outdoor':
        return ['Kh√¥ng gian m·ªü', 'Gi√≥ m√°t', 'View ƒë·∫πp'];
      default:
        return ['Kh√¥ng gian tho·∫£i m√°i'];
    }
  }

  String _getDescriptionForType(String tableType) {
    switch (tableType) {
      case 'vip':
        return 'B√†n VIP v·ªõi ph·ª•c v·ª• ƒë·∫∑c bi·ªát v√† kh√¥ng gian ri√™ng t∆∞';
      case 'standard':
        return 'B√†n th∆∞·ªùng v·ªõi kh√¥ng gian tho·∫£i m√°i, ph√π h·ª£p cho gia ƒë√¨nh';
      case 'outdoor':
        return 'B√†n ngo√†i tr·ªùi v·ªõi kh√¥ng gian m·ªü v√† gi√≥ m√°t';
      default:
        return 'B√†n th∆∞·ªùng v·ªõi kh√¥ng gian tho·∫£i m√°i';
    }
  }

  String _getLocationForType(String tableType) {
    switch (tableType) {
      case 'vip':
        return 'VIP Area';
      case 'standard':
        return 'Main Hall';
      case 'outdoor':
        return 'Garden';
      default:
        return 'Main Hall';
    }
  }

  double _getBasePriceForType(String tableType) {
    switch (tableType) {
      case 'vip':
        return 500000.0;
      case 'standard':
        return 300000.0;
      case 'outdoor':
        return 400000.0;
      default:
        return 300000.0;
    }
  }

  double _getPriceVariation(DateTime date, TimeOfDay time) {
    // Gi√° cao h∆°n v√†o cu·ªëi tu·∫ßn v√† gi·ªù ƒÉn t·ªëi
    final weekday = date.weekday;
    final hour = time.hour;
    final isWeekend =
        weekday == DateTime.saturday || weekday == DateTime.sunday;
    final isPeakTime = (hour >= 11 && hour <= 13) || (hour >= 18 && hour <= 20);

    if (isWeekend && isPeakTime) {
      return 1.3; // TƒÉng 30%
    } else if (isWeekend || isPeakTime) {
      return 1.2; // TƒÉng 20%
    }
    return 1.0; // Gi√° b√¨nh th∆∞·ªùng
  }

  /// Gi·∫£ l·∫≠p API call ƒë·ªÉ ƒë·∫∑t b√†n
  Future<bool> bookTable({
    required String restaurantId,
    required String tableId,
    required DateTime checkInDate,
    required TimeOfDay checkInTime,
    required int numberOfPeople,
  }) async {
    try {
      print('üìù ƒêang ƒë·∫∑t b√†n...');
      print('üçΩÔ∏è Restaurant ID: $restaurantId');
      print('üçΩÔ∏è Table ID: $tableId');
      print('üìÖ Ng√†y: ${checkInDate.toString().split(' ')[0]}');
      print(
          'üïê Gi·ªù: ${checkInTime.hour}:${checkInTime.minute.toString().padLeft(2, '0')}');
      print('üë• S·ªë ng∆∞·ªùi: $numberOfPeople');

      // Gi·∫£ l·∫≠p delay network
      await Future.delayed(Duration(seconds: 2));

      // Gi·∫£ l·∫≠p 90% th√†nh c√¥ng
      final isSuccess = DateTime.now().millisecond % 10 < 9;

      if (isSuccess) {
        print('‚úÖ ƒê·∫∑t b√†n th√†nh c√¥ng!');
        return true;
      } else {
        print('‚ùå ƒê·∫∑t b√†n th·∫•t b·∫°i (b√†n ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t b·ªüi ng∆∞·ªùi kh√°c)');
        return false;
      }
    } catch (e) {
      print('‚ùå L·ªói khi ƒë·∫∑t b√†n: $e');
      return false;
    }
  }
}
