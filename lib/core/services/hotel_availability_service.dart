import 'dart:convert';
import 'package:http/http.dart' as http;
import 'package:tourguideapp/models/room_availability_model.dart';

class HotelAvailabilityService {
  // Gi·∫£ l·∫≠p API endpoint c·ªßa ƒë·ªëi t√°c
  static const String _mockApiUrl =
      'https://mock-hotel-api.example.com/api/availability';

  // D·ªØ li·ªáu m·∫´u ƒë·ªÉ gi·∫£ l·∫≠p
  static final Map<String, List<RoomAvailabilityModel>> _mockAvailabilityData =
      {
    'H00001': [
      // Hotel ID
      RoomAvailabilityModel(
        roomId: 'R00001',
        roomName: 'Ph√≤ng Standard',
        roomType: 'single',
        capacity: 2,
        availableRooms: 5,
        totalRooms: 10,
        price: 800000.0,
        photo:
            'https://images.unsplash.com/photo-1631049307264-da0ec9d70304?w=400',
        amenities: ['WiFi', 'TV', 'ƒêi·ªÅu h√≤a', 'T·ªß l·∫°nh'],
        description: 'Ph√≤ng ti√™u chu·∫©n v·ªõi ƒë·∫ßy ƒë·ªß ti·ªán nghi c∆° b·∫£n',
      ),
      RoomAvailabilityModel(
        roomId: 'R00002',
        roomName: 'Ph√≤ng Deluxe',
        roomType: 'double',
        capacity: 3,
        availableRooms: 3,
        totalRooms: 8,
        price: 1200000.0,
        photo:
            'https://images.unsplash.com/photo-1618773928121-c32242e63f39?w=400',
        amenities: ['WiFi', 'TV', 'ƒêi·ªÅu h√≤a', 'T·ªß l·∫°nh', 'Mini bar', 'B·ªìn t·∫Øm'],
        description: 'Ph√≤ng cao c·∫•p v·ªõi view ƒë·∫πp v√† ti·ªán nghi sang tr·ªçng',
      ),
      RoomAvailabilityModel(
        roomId: 'R00003',
        roomName: 'Ph√≤ng Suite',
        roomType: 'suite',
        capacity: 4,
        availableRooms: 1,
        totalRooms: 3,
        price: 2500000.0,
        photo:
            'https://images.unsplash.com/photo-1582719478250-c89cae4dc85b?w=400',
        amenities: [
          'WiFi',
          'TV',
          'ƒêi·ªÅu h√≤a',
          'T·ªß l·∫°nh',
          'Mini bar',
          'B·ªìn t·∫Øm',
          'Ph√≤ng kh√°ch',
          'Ban c√¥ng'
        ],
        description: 'Ph√≤ng suite sang tr·ªçng v·ªõi kh√¥ng gian r·ªông r√£i',
      ),
    ],
    'H00002': [
      RoomAvailabilityModel(
        roomId: 'R00004',
        roomName: 'Ph√≤ng Standard',
        roomType: 'single',
        capacity: 2,
        availableRooms: 8,
        totalRooms: 15,
        price: 600000.0,
        photo:
            'https://images.unsplash.com/photo-1631049307264-da0ec9d70304?w=400',
        amenities: ['WiFi', 'TV', 'ƒêi·ªÅu h√≤a'],
        description: 'Ph√≤ng ti√™u chu·∫©n gi√° r·∫ª',
      ),
      RoomAvailabilityModel(
        roomId: 'R00005',
        roomName: 'Ph√≤ng Deluxe',
        roomType: 'double',
        capacity: 3,
        availableRooms: 4,
        totalRooms: 6,
        price: 1000000.0,
        photo:
            'https://images.unsplash.com/photo-1618773928121-c32242e63f39?w=400',
        amenities: ['WiFi', 'TV', 'ƒêi·ªÅu h√≤a', 'T·ªß l·∫°nh', 'Mini bar'],
        description: 'Ph√≤ng cao c·∫•p v·ªõi ti·ªán nghi ƒë·∫ßy ƒë·ªß',
      ),
    ],
    'H00003': [
      RoomAvailabilityModel(
        roomId: 'R00006',
        roomName: 'Ph√≤ng Standard',
        roomType: 'single',
        capacity: 2,
        availableRooms: 0, // H·∫øt ph√≤ng
        totalRooms: 5,
        price: 900000.0,
        photo:
            'https://images.unsplash.com/photo-1631049307264-da0ec9d70304?w=400',
        amenities: ['WiFi', 'TV', 'ƒêi·ªÅu h√≤a', 'T·ªß l·∫°nh'],
        description: 'Ph√≤ng ti√™u chu·∫©n ch·∫•t l∆∞·ª£ng cao',
      ),
      RoomAvailabilityModel(
        roomId: 'R00007',
        roomName: 'Ph√≤ng Deluxe',
        roomType: 'double',
        capacity: 3,
        availableRooms: 2,
        totalRooms: 4,
        price: 1500000.0,
        photo:
            'https://images.unsplash.com/photo-1618773928121-c32242e63f39?w=400',
        amenities: ['WiFi', 'TV', 'ƒêi·ªÅu h√≤a', 'T·ªß l·∫°nh', 'Mini bar', 'B·ªìn t·∫Øm'],
        description: 'Ph√≤ng cao c·∫•p v·ªõi view ƒë·∫πp',
      ),
    ],
  };

  /// Gi·∫£ l·∫≠p API call ƒë·ªÉ ki·ªÉm tra ph√≤ng tr·ªëng
  /// Trong th·ª±c t·∫ø, ƒë√¢y s·∫Ω l√† HTTP request ƒë·∫øn API c·ªßa ƒë·ªëi t√°c
  Future<List<RoomAvailabilityModel>> checkRoomAvailability({
    required String hotelId,
    required DateTime checkInDate,
    required DateTime checkOutDate,
    String? roomType, // Optional: l·ªçc theo lo·∫°i ph√≤ng
  }) async {
    try {
      print('üè® ƒêang ki·ªÉm tra ph√≤ng tr·ªëng cho kh√°ch s·∫°n $hotelId...');
      print('üìÖ Check-in: ${checkInDate.toString().split(' ')[0]}');
      print('üìÖ Check-out: ${checkOutDate.toString().split(' ')[0]}');
      if (roomType != null) {
        print('üè† Lo·∫°i ph√≤ng: $roomType');
      }

      // Gi·∫£ l·∫≠p delay network
      await Future.delayed(Duration(milliseconds: 800));

      // L·∫•y d·ªØ li·ªáu m·∫´u
      final availabilityData = _mockAvailabilityData[hotelId] ?? [];

      // L·ªçc theo lo·∫°i ph√≤ng n·∫øu c√≥
      final filteredData = availabilityData.where((room) {
        // L·ªçc theo lo·∫°i ph√≤ng n·∫øu c√≥
        final isTypeMatch = roomType == null || room.roomType == roomType;
        return isTypeMatch;
      }).toList();

      // T·∫°o d·ªØ li·ªáu m·∫´u ƒë·ªông d·ª±a tr√™n ng√†y check-in/check-out
      print(
          'üìä T·∫°o d·ªØ li·ªáu m·∫´u cho ng√†y ${checkInDate.toString().split(' ')[0]} - ${checkOutDate.toString().split(' ')[0]}...');
      return _generateMockAvailabilityForDate(
          hotelId, checkInDate, checkOutDate, roomType);
    } catch (e) {
      print('‚ùå L·ªói khi ki·ªÉm tra ph√≤ng tr·ªëng: $e');
      return [];
    }
  }

  /// T·∫°o d·ªØ li·ªáu m·∫´u cho ng√†y check-in/check-out
  List<RoomAvailabilityModel> _generateMockAvailabilityForDate(
    String hotelId,
    DateTime checkInDate,
    DateTime checkOutDate,
    String? roomType,
  ) {
    final roomTypes =
        roomType != null ? [roomType] : ['single', 'double', 'suite'];
    final results = <RoomAvailabilityModel>[];

    // T√≠nh s·ªë ng√†y ·ªü
    final numberOfDays = checkOutDate.difference(checkInDate).inDays;
    print('    üìÖ S·ªë ng√†y ·ªü: $numberOfDays ng√†y');

    for (final type in roomTypes) {
      // T·∫°o s·ªë ph√≤ng tr·ªëng ng·∫´u nhi√™n d·ª±a tr√™n ng√†y
      final availableRooms =
          _getRandomAvailabilityForDate(type, checkInDate, checkOutDate);
      final totalRooms =
          availableRooms + [1, 2, 3].elementAt(DateTime.now().millisecond % 3);
      final basePrice = _getBasePriceForType(type);

      // T√≠nh gi√° d·ª±a tr√™n ng√†y v√† s·ªë ng√†y ·ªü
      final priceVariation = _getPriceVariation(checkInDate);
      final finalPrice = basePrice * priceVariation * numberOfDays;

      results.add(RoomAvailabilityModel(
        roomId: 'R${hotelId.substring(1)}${type[0].toUpperCase()}',
        roomName: _getRoomNameForType(type),
        roomType: type,
        capacity: _getCapacityForType(type),
        availableRooms: availableRooms,
        totalRooms: totalRooms,
        price: finalPrice,
        photo: _getPhotoForType(type),
        amenities: _getAmenitiesForType(type),
        description: _getDescriptionForType(type),
      ));
    }

    return results;
  }

  int _getRandomAvailabilityForDate(
      String roomType, DateTime checkInDate, DateTime checkOutDate) {
    // Gi·∫£ l·∫≠p logic: cu·ªëi tu·∫ßn √≠t ph√≤ng tr·ªëng h∆°n, ng√†y th∆∞·ªùng nhi·ªÅu ph√≤ng tr·ªëng h∆°n
    final isWeekend = checkInDate.weekday == DateTime.saturday ||
        checkInDate.weekday == DateTime.sunday;

    switch (roomType) {
      case 'single':
        return isWeekend
            ? [0, 1, 2].elementAt(DateTime.now().millisecond % 3)
            : [2, 3, 5, 8].elementAt(DateTime.now().millisecond % 4);
      case 'double':
        return isWeekend
            ? [0, 1].elementAt(DateTime.now().millisecond % 2)
            : [1, 2, 3, 4].elementAt(DateTime.now().millisecond % 4);
      case 'suite':
        return isWeekend
            ? 0
            : [0, 1, 2].elementAt(DateTime.now().millisecond % 3);
      default:
        return isWeekend
            ? [0, 1].elementAt(DateTime.now().millisecond % 2)
            : [1, 2, 3].elementAt(DateTime.now().millisecond % 3);
    }
  }

  String _getRoomNameForType(String roomType) {
    switch (roomType) {
      case 'single':
        return 'Ph√≤ng Standard';
      case 'double':
        return 'Ph√≤ng Deluxe';
      case 'suite':
        return 'Ph√≤ng Suite';
      default:
        return 'Ph√≤ng Standard';
    }
  }

  int _getCapacityForType(String roomType) {
    switch (roomType) {
      case 'single':
        return 2;
      case 'double':
        return 3;
      case 'suite':
        return 4;
      default:
        return 2;
    }
  }

  String _getPhotoForType(String roomType) {
    switch (roomType) {
      case 'single':
        return 'https://images.unsplash.com/photo-1631049307264-da0ec9d70304?w=400';
      case 'double':
        return 'https://images.unsplash.com/photo-1618773928121-c32242e63f39?w=400';
      case 'suite':
        return 'https://images.unsplash.com/photo-1582719478250-c89cae4dc85b?w=400';
      default:
        return 'https://images.unsplash.com/photo-1631049307264-da0ec9d70304?w=400';
    }
  }

  List<String> _getAmenitiesForType(String roomType) {
    switch (roomType) {
      case 'single':
        return ['WiFi', 'TV', 'ƒêi·ªÅu h√≤a'];
      case 'double':
        return ['WiFi', 'TV', 'ƒêi·ªÅu h√≤a', 'T·ªß l·∫°nh', 'Mini bar'];
      case 'suite':
        return [
          'WiFi',
          'TV',
          'ƒêi·ªÅu h√≤a',
          'T·ªß l·∫°nh',
          'Mini bar',
          'B·ªìn t·∫Øm',
          'Ph√≤ng kh√°ch'
        ];
      default:
        return ['WiFi', 'TV', 'ƒêi·ªÅu h√≤a'];
    }
  }

  String _getDescriptionForType(String roomType) {
    switch (roomType) {
      case 'single':
        return 'Ph√≤ng ti√™u chu·∫©n v·ªõi ƒë·∫ßy ƒë·ªß ti·ªán nghi c∆° b·∫£n';
      case 'double':
        return 'Ph√≤ng cao c·∫•p v·ªõi ti·ªán nghi ƒë·∫ßy ƒë·ªß';
      case 'suite':
        return 'Ph√≤ng suite sang tr·ªçng v·ªõi kh√¥ng gian r·ªông r√£i';
      default:
        return 'Ph√≤ng ti√™u chu·∫©n v·ªõi ƒë·∫ßy ƒë·ªß ti·ªán nghi c∆° b·∫£n';
    }
  }

  double _getBasePriceForType(String roomType) {
    switch (roomType) {
      case 'single':
        return 600000.0;
      case 'double':
        return 1000000.0;
      case 'suite':
        return 2000000.0;
      default:
        return 800000.0;
    }
  }

  double _getPriceVariation(DateTime date) {
    // Gi√° cao h∆°n v√†o cu·ªëi tu·∫ßn
    final weekday = date.weekday;
    if (weekday == DateTime.saturday || weekday == DateTime.sunday) {
      return 1.2; // TƒÉng 20%
    }
    return 1.0; // Gi√° b√¨nh th∆∞·ªùng
  }

  /// Gi·∫£ l·∫≠p API call ƒë·ªÉ ƒë·∫∑t ph√≤ng
  Future<bool> bookRoom({
    required String hotelId,
    required String roomId,
    required DateTime checkInDate,
    required DateTime checkOutDate,
    required int numberOfRooms,
  }) async {
    try {
      print('üìù ƒêang ƒë·∫∑t ph√≤ng...');
      print('üè® Hotel ID: $hotelId');
      print('üè† Room ID: $roomId');
      print('üìÖ Check-in: ${checkInDate.toString().split(' ')[0]}');
      print('üìÖ Check-out: ${checkOutDate.toString().split(' ')[0]}');
      print('üî¢ S·ªë ph√≤ng: $numberOfRooms');

      // Gi·∫£ l·∫≠p delay network
      await Future.delayed(Duration(seconds: 2));

      // Gi·∫£ l·∫≠p 90% th√†nh c√¥ng
      final isSuccess = DateTime.now().millisecond % 10 < 9;

      if (isSuccess) {
        print('‚úÖ ƒê·∫∑t ph√≤ng th√†nh c√¥ng!');
        return true;
      } else {
        print('‚ùå ƒê·∫∑t ph√≤ng th·∫•t b·∫°i (ph√≤ng ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t b·ªüi ng∆∞·ªùi kh√°c)');
        return false;
      }
    } catch (e) {
      print('‚ùå L·ªói khi ƒë·∫∑t ph√≤ng: $e');
      return false;
    }
  }
}
