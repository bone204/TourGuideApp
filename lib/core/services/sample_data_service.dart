import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:tourguideapp/models/room_model.dart';
import 'package:tourguideapp/models/table_model.dart';

class SampleDataService {
  final FirebaseFirestore _firestore;

  SampleDataService({required FirebaseFirestore firestore})
      : _firestore = firestore;

  // T·∫°o d·ªØ li·ªáu m·∫´u cho ROOM
  Future<void> createSampleRooms() async {
    print('üè® B·∫Øt ƒë·∫ßu t·∫°o d·ªØ li·ªáu ph√≤ng m·∫´u...');

    final rooms = [
      RoomModel(
        roomId: 'R00001',
        hotelId: 'H00001',
        roomName: 'Ph√≤ng ƒê∆°n Standard',
        numberOfBeds: 1,
        capacity: 2,
        area: 25.0,
        basePrice: 800000.0,
        photo:
            'https://images.unsplash.com/photo-1631049307264-da0ec9d70304?w=400',
        description:
            'Ph√≤ng ƒë∆°n ti·ªán nghi v·ªõi 1 gi∆∞·ªùng ƒë∆°n, ph√π h·ª£p cho 1-2 ng∆∞·ªùi. C√≥ ƒë·∫ßy ƒë·ªß ti·ªán nghi c∆° b·∫£n.',
        roomType: 'single',
        amenities: [
          'WiFi',
          'ƒêi·ªÅu h√≤a',
          'TV',
          'T·ªß l·∫°nh mini',
          'Ph√≤ng t·∫Øm ri√™ng'
        ],
      ),
      RoomModel(
        roomId: 'R00002',
        hotelId: 'H00001',
        roomName: 'Ph√≤ng ƒê√¥i Deluxe',
        numberOfBeds: 2,
        capacity: 4,
        area: 35.0,
        basePrice: 1200000.0,
        photo:
            'https://images.unsplash.com/photo-1618773928121-c32242e63f39?w=400',
        description:
            'Ph√≤ng ƒë√¥i r·ªông r√£i v·ªõi 2 gi∆∞·ªùng ƒë∆°n, view ƒë·∫πp, ph√π h·ª£p cho gia ƒë√¨nh nh·ªè.',
        roomType: 'double',
        amenities: [
          'WiFi',
          'ƒêi·ªÅu h√≤a',
          'TV',
          'T·ªß l·∫°nh mini',
          'Ph√≤ng t·∫Øm ri√™ng',
          'Ban c√¥ng'
        ],
      ),
      RoomModel(
        roomId: 'R00003',
        hotelId: 'H00001',
        roomName: 'Suite Premium',
        numberOfBeds: 1,
        capacity: 3,
        area: 50.0,
        basePrice: 2500000.0,
        photo:
            'https://images.unsplash.com/photo-1582719478250-c89cae4dc85b?w=400',
        description:
            'Suite cao c·∫•p v·ªõi ph√≤ng ng·ªß v√† ph√≤ng kh√°ch ri√™ng bi·ªát, view to√†n c·∫£nh th√†nh ph·ªë.',
        roomType: 'suite',
        amenities: [
          'WiFi',
          'ƒêi·ªÅu h√≤a',
          'TV',
          'T·ªß l·∫°nh mini',
          'Ph√≤ng t·∫Øm ri√™ng',
          'Ban c√¥ng',
          'B·ªìn t·∫Øm',
          'Mini bar'
        ],
      ),
      RoomModel(
        roomId: 'R00004',
        hotelId: 'H00002',
        roomName: 'Ph√≤ng ƒê∆°n Economy',
        numberOfBeds: 1,
        capacity: 2,
        area: 20.0,
        basePrice: 600000.0,
        photo:
            'https://images.unsplash.com/photo-1631049307264-da0ec9d70304?w=400',
        description:
            'Ph√≤ng ƒë∆°n ti·∫øt ki·ªám v·ªõi ƒë·∫ßy ƒë·ªß ti·ªán nghi c∆° b·∫£n, ph√π h·ª£p cho kh√°ch du l·ªãch.',
        roomType: 'single',
        amenities: ['WiFi', 'ƒêi·ªÅu h√≤a', 'TV', 'Ph√≤ng t·∫Øm ri√™ng'],
      ),
      RoomModel(
        roomId: 'R00005',
        hotelId: 'H00002',
        roomName: 'Ph√≤ng ƒê√¥i Standard',
        numberOfBeds: 2,
        capacity: 3,
        area: 30.0,
        basePrice: 1000000.0,
        photo:
            'https://images.unsplash.com/photo-1618773928121-c32242e63f39?w=400',
        description:
            'Ph√≤ng ƒë√¥i ti√™u chu·∫©n v·ªõi 2 gi∆∞·ªùng ƒë∆°n, kh√¥ng gian tho·∫£i m√°i.',
        roomType: 'double',
        amenities: [
          'WiFi',
          'ƒêi·ªÅu h√≤a',
          'TV',
          'T·ªß l·∫°nh mini',
          'Ph√≤ng t·∫Øm ri√™ng'
        ],
      ),
      RoomModel(
        roomId: 'R00006',
        hotelId: 'H00003',
        roomName: 'Ph√≤ng ƒê∆°n Business',
        numberOfBeds: 1,
        capacity: 2,
        area: 28.0,
        basePrice: 900000.0,
        photo:
            'https://images.unsplash.com/photo-1631049307264-da0ec9d70304?w=400',
        description:
            'Ph√≤ng ƒë∆°n d√†nh cho kh√°ch doanh nh√¢n v·ªõi b√†n l√†m vi·ªác v√† kh√¥ng gian y√™n tƒ©nh.',
        roomType: 'single',
        amenities: [
          'WiFi',
          'ƒêi·ªÅu h√≤a',
          'TV',
          'T·ªß l·∫°nh mini',
          'Ph√≤ng t·∫Øm ri√™ng',
          'B√†n l√†m vi·ªác'
        ],
      ),
      RoomModel(
        roomId: 'R00007',
        hotelId: 'H00003',
        roomName: 'Ph√≤ng ƒê√¥i Executive',
        numberOfBeds: 1,
        capacity: 3,
        area: 40.0,
        basePrice: 1500000.0,
        photo:
            'https://images.unsplash.com/photo-1618773928121-c32242e63f39?w=400',
        description:
            'Ph√≤ng ƒë√¥i cao c·∫•p v·ªõi gi∆∞·ªùng king size, view ƒë·∫πp v√† ti·ªán nghi sang tr·ªçng.',
        roomType: 'double',
        amenities: [
          'WiFi',
          'ƒêi·ªÅu h√≤a',
          'TV',
          'T·ªß l·∫°nh mini',
          'Ph√≤ng t·∫Øm ri√™ng',
          'Ban c√¥ng',
          'B·ªìn t·∫Øm'
        ],
      ),
    ];

    for (final room in rooms) {
      await _firestore.collection('ROOM').doc(room.roomId).set(room.toMap());
      print('‚úÖ ƒê√£ t·∫°o ph√≤ng: ${room.roomName}');
    }

    print('üéâ Ho√†n th√†nh t·∫°o ${rooms.length} ph√≤ng m·∫´u!');
  }

  // T·∫°o d·ªØ li·ªáu m·∫´u cho TABLE
  Future<void> createSampleTables() async {
    print('üçΩÔ∏è B·∫Øt ƒë·∫ßu t·∫°o d·ªØ li·ªáu b√†n m·∫´u...');

    final tables = [
      TableModel(
        tableId: 'T00001',
        restaurantId: 'C00001',
        tableName: 'B√†n 2 ng∆∞·ªùi - G√≥c c·ª≠a s·ªï',
        numberOfTables: 5,
        dishType: 'M√≥n Vi·ªát Nam',
        priceRange: '100,000 - 300,000 VNƒê',
        maxPeople: 2,
        note: 'View ƒë·∫πp, ph√π h·ª£p cho c·∫∑p ƒë√¥i',
        price: 150000.0,
        photo:
            'https://images.unsplash.com/photo-1517248135467-4c7edcad34c4?w=400',
        description:
            'B√†n 2 ng∆∞·ªùi v·ªõi view c·ª≠a s·ªï ƒë·∫πp, ph√π h·ª£p cho b·ªØa t·ªëi l√£ng m·∫°n.',
        isAvailable: true,
      ),
      TableModel(
        tableId: 'T00002',
        restaurantId: 'C00001',
        tableName: 'B√†n 4 ng∆∞·ªùi - Gi·ªØa nh√† h√†ng',
        numberOfTables: 8,
        dishType: 'M√≥n Vi·ªát Nam',
        priceRange: '200,000 - 500,000 VNƒê',
        maxPeople: 4,
        note: 'Kh√¥ng gian tho·∫£i m√°i cho gia ƒë√¨nh',
        price: 250000.0,
        photo:
            'https://images.unsplash.com/photo-1517248135467-4c7edcad34c4?w=400',
        description:
            'B√†n 4 ng∆∞·ªùi ·ªü v·ªã tr√≠ trung t√¢m, kh√¥ng gian tho·∫£i m√°i cho gia ƒë√¨nh.',
        isAvailable: true,
      ),
      TableModel(
        tableId: 'T00003',
        restaurantId: 'C00001',
        tableName: 'B√†n 6 ng∆∞·ªùi - Ph√≤ng ri√™ng',
        numberOfTables: 3,
        dishType: 'M√≥n Vi·ªát Nam',
        priceRange: '300,000 - 800,000 VNƒê',
        maxPeople: 6,
        note: 'Ph√≤ng ri√™ng y√™n tƒ©nh',
        price: 400000.0,
        photo:
            'https://images.unsplash.com/photo-1517248135467-4c7edcad34c4?w=400',
        description:
            'B√†n 6 ng∆∞·ªùi trong ph√≤ng ri√™ng, ph√π h·ª£p cho nh√≥m b·∫°n ho·∫∑c gia ƒë√¨nh l·ªõn.',
        isAvailable: true,
      ),
      TableModel(
        tableId: 'T00004',
        restaurantId: 'C00002',
        tableName: 'B√†n 2 ng∆∞·ªùi - Ngo√†i tr·ªùi',
        numberOfTables: 6,
        dishType: 'H·∫£i s·∫£n',
        priceRange: '150,000 - 400,000 VNƒê',
        maxPeople: 2,
        note: 'Kh√¥ng gian ngo√†i tr·ªùi m√°t m·∫ª',
        price: 200000.0,
        photo:
            'https://images.unsplash.com/photo-1517248135467-4c7edcad34c4?w=400',
        description: 'B√†n 2 ng∆∞·ªùi ngo√†i tr·ªùi v·ªõi kh√¥ng gian m√°t m·∫ª, view ƒë·∫πp.',
        isAvailable: true,
      ),
      TableModel(
        tableId: 'T00005',
        restaurantId: 'C00002',
        tableName: 'B√†n 4 ng∆∞·ªùi - Trong nh√†',
        numberOfTables: 10,
        dishType: 'H·∫£i s·∫£n',
        priceRange: '250,000 - 600,000 VNƒê',
        maxPeople: 4,
        note: 'Kh√¥ng gian ƒëi·ªÅu h√≤a tho·∫£i m√°i',
        price: 300000.0,
        photo:
            'https://images.unsplash.com/photo-1517248135467-4c7edcad34c4?w=400',
        description:
            'B√†n 4 ng∆∞·ªùi trong nh√† v·ªõi ƒëi·ªÅu h√≤a, kh√¥ng gian tho·∫£i m√°i.',
        isAvailable: true,
      ),
    ];

    for (final table in tables) {
      await _firestore
          .collection('TABLE')
          .doc(table.tableId)
          .set(table.toMap());
      print('‚úÖ ƒê√£ t·∫°o b√†n: ${table.tableName}');
    }

    print('üéâ Ho√†n th√†nh t·∫°o ${tables.length} b√†n m·∫´u!');
  }

  // T·∫°o t·∫•t c·∫£ d·ªØ li·ªáu m·∫´u
  Future<void> createAllSampleData() async {
    print('üöÄ B·∫Øt ƒë·∫ßu t·∫°o t·∫•t c·∫£ d·ªØ li·ªáu m·∫´u...');

    await createSampleRooms();
    await createSampleTables();

    print('üéâ Ho√†n th√†nh t·∫°o t·∫•t c·∫£ d·ªØ li·ªáu m·∫´u!');
  }

  // X√≥a t·∫•t c·∫£ d·ªØ li·ªáu m·∫´u
  Future<void> deleteAllSampleData() async {
    print('üóëÔ∏è B·∫Øt ƒë·∫ßu x√≥a d·ªØ li·ªáu m·∫´u...');

    // X√≥a t·∫•t c·∫£ ph√≤ng
    final roomDocs = await _firestore.collection('ROOM').get();
    for (final doc in roomDocs.docs) {
      await doc.reference.delete();
    }
    print('‚úÖ ƒê√£ x√≥a ${roomDocs.docs.length} ph√≤ng');

    // X√≥a t·∫•t c·∫£ b√†n
    final tableDocs = await _firestore.collection('TABLE').get();
    for (final doc in tableDocs.docs) {
      await doc.reference.delete();
    }
    print('‚úÖ ƒê√£ x√≥a ${tableDocs.docs.length} b√†n');

    print('üéâ Ho√†n th√†nh x√≥a d·ªØ li·ªáu m·∫´u!');
  }
}
