import 'dart:convert';
import 'package:http/http.dart' as http;
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:tourguideapp/models/cooperation_model.dart';

class CooperationImportService {
  static const String _baseUrl = 'https://maps.googleapis.com/maps/api/place';
  final String apiKey;
  final FirebaseFirestore _firestore;

  CooperationImportService({
    required this.apiKey,
    required FirebaseFirestore firestore,
  }) : _firestore = firestore;

  // 20 t·ªânh l·ªõn cho hotel/restaurant
  final List<Map<String, dynamic>> provincesForHotelRestaurant = [
    {'name': 'H√† N·ªôi', 'lat': 21.0285, 'lng': 105.8542, 'radius': 35000.0},
    {'name': 'H·ªì Ch√≠ Minh', 'lat': 10.7769, 'lng': 106.7009, 'radius': 50000.0},
    {'name': 'ƒê√† N·∫µng', 'lat': 16.0544, 'lng': 108.2022, 'radius': 35000.0},
    {'name': 'H·∫£i Ph√≤ng', 'lat': 20.8449, 'lng': 106.6881, 'radius': 25000.0},
    {'name': 'C·∫ßn Th∆°', 'lat': 10.0452, 'lng': 105.7469, 'radius': 20000.0},
    {'name': 'Hu·∫ø', 'lat': 16.4637, 'lng': 107.5909, 'radius': 20000.0},
    {
      'name': 'B√† R·ªãa - V≈©ng T√†u',
      'lat': 10.4114,
      'lng': 107.1362,
      'radius': 20000.0
    },
    {'name': 'Qu·∫£ng Ninh', 'lat': 21.1170, 'lng': 107.2925, 'radius': 30000.0},
    {'name': 'Thanh H√≥a', 'lat': 19.8079, 'lng': 105.7764, 'radius': 20000.0},
    {'name': 'Ngh·ªá An', 'lat': 19.2342, 'lng': 104.9200, 'radius': 20000.0},
    {'name': 'B√¨nh D∆∞∆°ng', 'lat': 11.3254, 'lng': 106.4770, 'radius': 20000.0},
    {'name': 'B√¨nh Thu·∫≠n', 'lat': 10.9280, 'lng': 108.1000, 'radius': 20000.0},
    {'name': 'Ki√™n Giang', 'lat': 10.0070, 'lng': 105.0763, 'radius': 20000.0},
    {'name': 'L√¢m ƒê·ªìng', 'lat': 11.9404, 'lng': 108.4587, 'radius': 20000.0},
    {'name': 'Qu·∫£ng Nam', 'lat': 15.5393, 'lng': 108.0191, 'radius': 20000.0},
    {
      'name': 'Th·ª´a Thi√™n Hu·∫ø',
      'lat': 16.4637,
      'lng': 107.5909,
      'radius': 20000.0
    },
    {'name': 'Kh√°nh H√≤a', 'lat': 12.2388, 'lng': 109.1967, 'radius': 20000.0},
  ];

  // 10 t·ªânh n·ªïi ti·∫øng cho eatery
  final List<Map<String, dynamic>> provincesForEatery = [
    {'name': 'H√† N·ªôi', 'lat': 21.0285, 'lng': 105.8542, 'radius': 20000.0},
    {'name': 'H·ªì Ch√≠ Minh', 'lat': 10.7769, 'lng': 106.7009, 'radius': 25000.0},
    {'name': 'ƒê√† N·∫µng', 'lat': 16.0544, 'lng': 108.2022, 'radius': 20000.0},
    {'name': 'H·∫£i Ph√≤ng', 'lat': 20.8449, 'lng': 106.6881, 'radius': 15000.0},
    {'name': 'B√¨nh D∆∞∆°ng', 'lat': 11.3254, 'lng': 106.4770, 'radius': 20000.0},
    {'name': 'C·∫ßn Th∆°', 'lat': 10.0452, 'lng': 105.7469, 'radius': 15000.0},
    {'name': 'L√¢m ƒê·ªìng', 'lat': 11.9404, 'lng': 108.4587, 'radius': 15000.0},
    {'name': 'Kh√°nh H√≤a', 'lat': 12.2388, 'lng': 109.1967, 'radius': 15000.0},
    {'name': 'Hu·∫ø', 'lat': 16.4637, 'lng': 107.5909, 'radius': 15000.0},
    {
      'name': 'B√† R·ªãa - V≈©ng T√†u',
      'lat': 10.4114,
      'lng': 107.1362,
      'radius': 15000.0
    },
  ];

  final eateryKeywords = [
    'qu√°n',
    'b√∫n',
    'ph·ªü',
    'c∆°m',
    'ch√°o',
    'b√°nh kh·ªçt',
    'b√°nh x√®o',
    'b√°nh canh',
    'b√°nh cu·ªën',
    'b√°nh ∆∞·ªõt',
    'b√°nh b·ªôt l·ªçc',
    'b√°nh b√®o',
    'b√°nh h·ªèi',
    'b√°nh tr√°ng',
    'b√°nh bao',
    'b√°nh m√¨',
    'b√°nh ng·ªçt',
    'b√°nh cƒÉn',
    'c∆°m t·∫•m',
    'h·ªß ti·∫øu',
    'ƒÉn v·∫∑t',
    'food',
    'street food',
    'g√°nh',
    'l·∫©u',
    'g√†',
    'v·ªãt',
    '·ªëc',
    'nem',
    'ch√®',
    'b√≤',
    'th·ªãt',
    'c√°',
    't√¥m',
    'h·∫£i s·∫£n'
  ];

  bool isEatery(String name) {
    final lower = name.toLowerCase();
    return eateryKeywords.any((kw) => lower.contains(kw));
  }

  Future<void> importCooperationsToFirebase() async {
    print('üöÄ B·∫Øt ƒë·∫ßu import hotel/restaurant cho 20 t·ªânh l·ªõn...');
    for (final province in provincesForHotelRestaurant) {
      for (final type in ['hotel', 'restaurant']) {
        print('\nüìç ƒêang x·ª≠ l√Ω: ${province['name']} - $type');
        await _importForType(
          province['name'],
          province['lat'],
          province['lng'],
          province['radius'],
          type,
          limit: 5,
        );
        await Future.delayed(Duration(seconds: 1));
      }
    }
    print('üöÄ B·∫Øt ƒë·∫ßu import eatery cho 10 t·ªânh n·ªïi ti·∫øng...');
    for (final province in provincesForEatery) {
      print('\nüìç ƒêang x·ª≠ l√Ω: ${province['name']} - eatery');
      await _importForEatery(
        province['name'],
        province['lat'],
        province['lng'],
        province['radius'],
        limit: 7,
      );
      await Future.delayed(Duration(seconds: 1));
    }
    print('\n‚úÖ Ho√†n th√†nh import!');
  }

  Future<void> _importForType(
      String province, double lat, double lng, double radius, String type,
      {int limit = 3}) async {
    // ‚úÖ T·ªëi ∆∞u: Ch·ªâ d√πng 1 t·ª´ kh√≥a ch√≠nh thay v√¨ 2
    List<String> textQueries = [];
    if (type == 'hotel') {
      textQueries = [
        'kh√°ch s·∫°n n·ªïi ti·∫øng $province', // ‚úÖ Ch·ªâ 1 t·ª´ kh√≥a ch√≠nh
      ];
    } else if (type == 'restaurant') {
      textQueries = [
        'nh√† h√†ng n·ªïi ti·∫øng $province', // ‚úÖ Ch·ªâ 1 t·ª´ kh√≥a ch√≠nh
      ];
    }

    List<Map<String, dynamic>> allPlaces = [];
    final seenPlaceIds = <String>{};

    for (final query in textQueries) {
      print('  üîç ƒêang t√¨m ki·∫øm v·ªõi t·ª´ kh√≥a: "$query"');
      // ‚úÖ T·ªëi ∆∞u: Gi·∫£m radius v√† ch·ªâ l·∫•y 1 trang ƒë·∫ßu
      final places = await searchByTextOptimized(query, lat, lng,
          radius: radius, maxPages: 1);

      // Lo·∫°i b·ªè tr√πng l·∫∑p
      for (final place in places) {
        final placeId = place['place_id'];
        if (!seenPlaceIds.contains(placeId)) {
          allPlaces.add(place);
          seenPlaceIds.add(placeId);
        }
      }

      await Future.delayed(Duration(seconds: 2)); // ‚úÖ TƒÉng delay
    }

    print('  üìä T√¨m th·∫•y ${allPlaces.length} $type');

    // Log t·∫•t c·∫£ k·∫øt qu·∫£ tr∆∞·ªõc khi l·ªçc
    print('  üìã Danh s√°ch t·∫•t c·∫£ k·∫øt qu·∫£ tr∆∞·ªõc khi l·ªçc:');
    for (int i = 0; i < allPlaces.length; i++) {
      final place = allPlaces[i];
      final name = place['name'] ?? 'Unknown';
      final types = List<String>.from(place['types'] ?? []);
      final rating = place['rating']?.toDouble() ?? 0.0;
      final userRatingsTotal = place['user_ratings_total'] ?? 0;
      print(
          '    ${i + 1}. $name (types: ${types.join(', ')}) - Rating: $rating ($userRatingsTotal ƒë√°nh gi√°)');
    }

    // L·ªçc theo lo·∫°i
    final filteredPlaces = allPlaces.where((place) {
      final name = (place['name'] ?? '').toLowerCase();
      final types = List<String>.from(place['types'] ?? []);
      final rating = place['rating']?.toDouble() ?? 0.0;
      final userRatingsTotal = place['user_ratings_total'] ?? 0;

      // ‚úÖ T·ªëi ∆∞u: Gi·∫£m y√™u c·∫ßu rating
      if (rating < 3.0 || userRatingsTotal < 10) return false;

      // Ki·ªÉm tra type ph√π h·ª£p
      if (type == 'hotel') {
        return types.contains('lodging') ||
            name.contains('kh√°ch s·∫°n') ||
            name.contains('hotel') ||
            name.contains('resort');
      } else if (type == 'restaurant') {
        return types.contains('restaurant') ||
            types.contains('food') ||
            name.contains('nh√† h√†ng') ||
            name.contains('restaurant');
      }

      return true;
    }).toList();

    print('  üéØ Sau khi l·ªçc: ${filteredPlaces.length} $type');

    int count = 0;
    for (final place in filteredPlaces) {
      if (count >= limit) break;
      final placeId = place['place_id'];
      final existing = await _firestore
          .collection('COOPERATION')
          .where('place_id', isEqualTo: placeId)
          .get();
      if (existing.docs.isNotEmpty) {
        print('    ‚ö†Ô∏è  ƒê√£ t·ªìn t·∫°i: ${place['name']}');
        continue;
      }

      // ‚úÖ T·ªëi ∆∞u: Ch·ªâ g·ªçi Place Details cho ƒë·ªãa ƒëi·ªÉm th·ª±c s·ª± c·∫ßn
      final cooperation =
          await _convertToCooperationModelOptimized(place, province, type);
      await _saveToFirebase(cooperation, placeId);
      print('    ‚úÖ Imported: ${cooperation.name}');
      count++;
    }
  }

  Future<void> _importForEatery(
      String province, double lat, double lng, double radius,
      {int limit = 7}) async {
    // ‚úÖ T·ªëi ∆∞u: Ch·ªâ d√πng 2 t·ª´ kh√≥a ch√≠nh thay v√¨ 4
    final textQueries = [
      'qu√°n ƒÉn n·ªïi ti·∫øng $province', // ‚úÖ T·ª´ kh√≥a ch√≠nh
      'ƒë·∫∑c s·∫£n $province', // ‚úÖ T·ª´ kh√≥a ph·ª•
    ];

    List<Map<String, dynamic>> allPlaces = [];
    final seenPlaceIds = <String>{};

    for (final query in textQueries) {
      print('  üîç ƒêang t√¨m ki·∫øm v·ªõi t·ª´ kh√≥a: "$query"');
      // ‚úÖ T·ªëi ∆∞u: Gi·∫£m radius v√† ch·ªâ l·∫•y 1 trang ƒë·∫ßu
      final places = await searchByTextOptimized(query, lat, lng,
          radius: radius, maxPages: 1);

      for (final place in places) {
        final placeId = place['place_id'];
        if (!seenPlaceIds.contains(placeId)) {
          allPlaces.add(place);
          seenPlaceIds.add(placeId);
        }
      }

      await Future.delayed(Duration(seconds: 2)); // ‚úÖ TƒÉng delay
    }

    print('  üìä T√¨m th·∫•y ${allPlaces.length} ƒë·ªãa ƒëi·ªÉm t·ª´ Text Search');

    // Log t·∫•t c·∫£ k·∫øt qu·∫£ tr∆∞·ªõc khi l·ªçc
    print('  üìã Danh s√°ch t·∫•t c·∫£ k·∫øt qu·∫£ tr∆∞·ªõc khi l·ªçc:');
    for (int i = 0; i < allPlaces.length; i++) {
      final place = allPlaces[i];
      final name = place['name'] ?? 'Unknown';
      final types = List<String>.from(place['types'] ?? []);
      final rating = place['rating']?.toDouble() ?? 0.0;
      final userRatingsTotal = place['user_ratings_total'] ?? 0;
      print(
          '    ${i + 1}. $name (types: ${types.join(', ')}) - Rating: $rating ($userRatingsTotal ƒë√°nh gi√°)');
    }

    // L·ªçc ra qu√°n ƒÉn ƒë·∫∑c s·∫£n
    final eateryPlaces = allPlaces.where((place) {
      final name = (place['name'] ?? '').toLowerCase();
      final types = List<String>.from(place['types'] ?? []);
      final rating = place['rating']?.toDouble() ?? 0.0;
      final userRatingsTotal = place['user_ratings_total'] ?? 0;

      // Lo·∫°i b·ªè kh√°ch s·∫°n, resort
      if (types.contains('lodging') ||
          types.contains('hotel') ||
          types.contains('resort')) {
        return false;
      }

      // Lo·∫°i b·ªè t·ª´ kh√≥a kh√°ch s·∫°n
      final hotelKeywords = [
        'hotel',
        'kh√°ch s·∫°n',
        'resort',
        'nh√† ngh·ªâ',
        'homestay',
        'villa',
        'hostel',
        'apartment'
      ];
      if (hotelKeywords.any((kw) => name.contains(kw))) {
        return false;
      }

      // ‚úÖ T·ªëi ∆∞u: Gi·∫£m y√™u c·∫ßu rating
      return isEatery(name) && rating >= 3.0 && userRatingsTotal >= 5;
    }).toList();

    print('  üéØ Sau khi l·ªçc: ${eateryPlaces.length} eatery');

    if (eateryPlaces.isEmpty) {
      print('  ‚ö†Ô∏è  Kh√¥ng t√¨m th·∫•y eatery n√†o sau khi l·ªçc!');
      return;
    }

    int count = 0;
    for (final place in eateryPlaces) {
      if (count >= limit) break;
      final placeId = place['place_id'];
      final existing = await _firestore
          .collection('COOPERATION')
          .where('place_id', isEqualTo: placeId)
          .get();
      if (existing.docs.isNotEmpty) {
        print('    ‚ö†Ô∏è  ƒê√£ t·ªìn t·∫°i: ${place['name']}');
        continue;
      }

      // ‚úÖ T·ªëi ∆∞u: Ch·ªâ g·ªçi Place Details cho ƒë·ªãa ƒëi·ªÉm th·ª±c s·ª± c·∫ßn
      final cooperation =
          await _convertToCooperationModelOptimized(place, province, 'eatery');
      await _saveToFirebase(cooperation, placeId);
      print('    ‚úÖ Imported: ${cooperation.name}');
      count++;
    }
  }

  // ‚úÖ T·ªëi ∆∞u: H√†m m·ªõi ch·ªâ l·∫•y 1 trang v√† gi·∫£m delay
  Future<List<Map<String, dynamic>>> searchByTextOptimized(
      String query, double lat, double lng,
      {double radius = 50000, int maxPages = 1}) async {
    List<Map<String, dynamic>> allResults = [];
    String? nextPageToken;
    int pageCount = 0;

    do {
      String url = Uri.parse(
              '$_baseUrl/textsearch/json?query=$query&location=$lat,$lng&radius=$radius&language=vi&key=$apiKey')
          .toString();

      if (nextPageToken != null) {
        url += '&pagetoken=$nextPageToken';
      }

      try {
        print(
            '    üåê G·ªçi Text Search API v·ªõi query: "$query" (trang ${pageCount + 1})...');
        final startTime = DateTime.now();

        final response = await http.get(Uri.parse(url));

        final endTime = DateTime.now();
        final duration = endTime.difference(startTime);
        print(
            '    ‚è±Ô∏è  Text Search response trong ${duration.inMilliseconds}ms');

        if (response.statusCode == 200) {
          final data = json.decode(response.body);
          if (data['status'] == 'OK') {
            final results = List<Map<String, dynamic>>.from(data['results']);
            allResults.addAll(results);
            nextPageToken = data['next_page_token'];
            pageCount++;

            print(
                '    ‚úÖ Text Search th√†nh c√¥ng: ${results.length} k·∫øt qu·∫£ (t·ªïng: ${allResults.length})');

            // ‚úÖ T·ªëi ∆∞u: Ch·ªâ l·∫•y t·ªëi ƒëa maxPages trang
            if (nextPageToken != null && pageCount < maxPages) {
              print(
                  '    ‚è≥ ƒê·ª£i 1 gi√¢y tr∆∞·ªõc khi l·∫•y trang ti·∫øp theo...'); // ‚úÖ Gi·∫£m delay
              await Future.delayed(Duration(seconds: 1));
            } else {
              break; // ‚úÖ D·ª´ng n·∫øu ƒë√£ ƒë·ªß trang
            }
          } else {
            print(
                '    ‚ùå Text Search failed: ${data['status']} - ${data['error_message'] ?? 'Unknown error'}');
            break;
          }
        } else {
          print('    ‚ùå Text Search HTTP error: ${response.statusCode}');
          break;
        }
      } catch (e) {
        print('    ‚ùå Text Search error: $e');
        break;
      }
    } while (nextPageToken != null);

    return allResults;
  }

  // ‚úÖ T·ªëi ∆∞u: H√†m m·ªõi kh√¥ng g·ªçi Place Details ƒë·ªÉ ti·∫øt ki·ªám request
  Future<CooperationModel> _convertToCooperationModelOptimized(
      Map<String, dynamic> place, String province, String type) async {
    final name = place['name'] ?? '';
    final lat = place['geometry']['location']['lat'] ?? 0.0;
    final lng = place['geometry']['location']['lng'] ?? 0.0;
    final address = place['vicinity'] ?? '';
    final placeId = place['place_id'] ?? '';
    final rating = place['rating']?.toDouble() ?? 0.0;
    final userRatingsTotal = place['user_ratings_total'] ?? 0;

    print(
        '        üìç X·ª≠ l√Ω: $name (ID: $placeId) - Rating: $rating ($userRatingsTotal ƒë√°nh gi√°)');

    // ‚úÖ T·ªëi ∆∞u: Kh√¥ng g·ªçi Place Details, ch·ªâ d√πng d·ªØ li·ªáu t·ª´ Text Search
    String description = '';
    String photo = '';

    // L·∫•y ·∫£nh t·ª´ Text Search n·∫øu c√≥
    if (place['photos'] != null && place['photos'].isNotEmpty) {
      final photoRef = place['photos'][0]['photo_reference'];
      photo = _getPhotoUrl(photoRef, maxWidth: 800); // ‚úÖ Gi·∫£m ch·∫•t l∆∞·ª£ng ·∫£nh
      print('        üì∏ C√≥ ·∫£nh t·ª´ Text Search: C√≥');
    }

    return CooperationModel(
      cooperationId: '', // s·∫Ω generate khi l∆∞u
      name: name,
      type: type,
      numberOfObjects: 0,
      numberOfObjectTypes: 0,
      latitude: lat,
      longitude: lng,
      bossName: '',
      bossPhone: '',
      bossEmail: '',
      address: address,
      district: '',
      city: '',
      province: province,
      photo: photo,
      extension: description,
      introduction: description,
      contractDate: '',
      contractTerm: '',
      bankAccountNumber: '',
      bankAccountName: '',
      bankName: '',
      bookingTimes: 0,
      revenue: 0.0,
      averageRating: rating,
      priceLevel: '', // Ch∆∞a c√≥ th√¥ng tin gi√°
    );
  }

  Future<Map<String, dynamic>?> getPlaceDetails(String placeId) async {
    final url = Uri.parse(
      '$_baseUrl/details/json?place_id=$placeId&fields=name,formatted_address,geometry,photos,editorial_summary,reviews,rating,user_ratings_total,types,opening_hours,formatted_phone_number,website,price_level&language=vi&key=$apiKey',
    );

    try {
      print('      üåê G·ªçi Place Details API...');
      final startTime = DateTime.now();

      final response = await http.get(url);

      final endTime = DateTime.now();
      final duration = endTime.difference(startTime);
      print(
          '      ‚è±Ô∏è  Place Details response trong ${duration.inMilliseconds}ms');

      if (response.statusCode == 200) {
        final data = json.decode(response.body);
        if (data['status'] == 'OK') {
          print('      ‚úÖ Place Details th√†nh c√¥ng');
          return data['result'];
        } else {
          print(
              '      ‚ùå Place Details failed: ${data['status']} - ${data['error_message'] ?? 'Unknown error'}');
        }
      } else {
        print('      ‚ùå Place Details HTTP error: ${response.statusCode}');
      }
      return null;
    } catch (e) {
      print('      ‚ùå Place Details error: $e');
      return null;
    }
  }

  String _getPhotoUrl(String photoReference, {int maxWidth = 1200}) {
    return '$_baseUrl/photo?maxwidth=$maxWidth&photo_reference=$photoReference&key=$apiKey';
  }

  Future<void> _saveToFirebase(
      CooperationModel cooperation, String placeId) async {
    try {
      final newId = await _generateCooperationId();
      final newCoop = cooperation.copyWith(cooperationId: newId);
      await _firestore.collection('COOPERATION').doc(newId).set({
        ...newCoop.toMap(),
        'place_id': placeId,
      });
    } catch (e) {
      print('‚ùå Error saving cooperation: $e');
    }
  }

  Future<String> _generateCooperationId() async {
    try {
      final snapshot = await _firestore
          .collection('COOPERATION')
          .orderBy('cooperationId', descending: true)
          .limit(1)
          .get();
      if (snapshot.docs.isEmpty) return 'C00001';
      final lastId = snapshot.docs.first['cooperationId'] as String;
      final number = int.parse(lastId.substring(1)) + 1;
      return 'C${number.toString().padLeft(5, '0')}';
    } catch (e) {
      return 'C${DateTime.now().millisecondsSinceEpoch.toString().substring(7)}';
    }
  }

  Future<void> convertEateryToHotel() async {
    final query = await _firestore
        .collection('COOPERATION')
        .where('type', isEqualTo: 'eatery')
        .get();

    int updated = 0;
    for (final doc in query.docs) {
      await doc.reference.update({'type': 'hotel'});
      updated++;
    }
    print('ƒê√£ chuy·ªÉn $updated eatery th√†nh hotel!');
  }
}
